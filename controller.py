"""
Copyright (c) 2018 Cisco and/or its affiliates.

This software is licensed to you under the terms of the Cisco Sample
Code License, Version 1.0 (the "License"). You may obtain a copy of the
License at

               https://developer.cisco.com/docs/licenses

All use of the material herein must be in accordance with the terms of
the License. All rights not expressly granted by the License are
reserved. Unless required by applicable law or agreed to separately in
writing, software distributed under the License is distributed on an "AS
IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied.

"""

import json

from flask import Flask, render_template, request, redirect, url_for, flash
from urllib2 import Request, urlopen
import xml.etree.ElementTree as ET
import requests
import xmltodict

app = Flask(__name__)
app.secret_key = 'some_secret'

# CMS username and password
username = 'Username'
password = 'Password'
cms_url = 'https://{{apitarget}}:{{apiport}}'

@app.route('/')
def index():
    profiles_data_list = getCallLegProfiles()
    return render_template('index.html', profiles_data = profiles_data_list)

# Generic method to create a Call Leg profile
def createCallLegProfile():
    r = requests.post(cms_url+'/api/v1/callLegProfiles', auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    location = r.headers.get("Location")
    profileID = location.split("/")[4]
    return profileID

# Create Lecturer Call leg Profile
@app.route('/lecture')
def addCallLegLecturerProfile():
    callLegProfID = createCallLegProfile()
    xml = {
    "needsActivation": "false",
    "defaultLayout": "allEqualNinths",
    "presentationDisplayMode": "dualStream",
    "presentationContributionAllowed": "true",
    "muteOthersAllowed": "true",
    "videoMuteOthersAllowed": "true",
    "allowAllPresentationContributionAllowed": "true",
    "changeJoinAudioMuteOverrideAllowed": "true",
    "qualityMain": "max1080p30"
  }
    headers = {'Content-Type': 'x-www-form-urlencoded'}
    r = requests.put(cms_url+'/api/v1/callLegProfiles/'+callLegProfID, data=xml, headers=headers, auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    print r
    return callLegProfID

# Create Student Call leg Profile
@app.route('/student')
def addCallLegStudentProfile():
    callLegProfID = createCallLegProfile()
    xml = {
    "needsActivation": "false",
    "defaultLayout": "speakerOnly",
    "presentationDisplayMode": "dualStream",
    "presentationContributionAllowed": "true",
    "deactivationMode": "deactivate",
    "muteOthersAllowed": "false",
    "videoMuteOthersAllowed": "false",
    "muteSelfAllowed": "false",
    "videoMuteSelfAllowed": "false",
    "allowAllPresentationContributionAllowed": "false",
    "qualityMain": "max720p30"
  }
    headers = {'Content-Type': 'x-www-form-urlencoded'}
    r = requests.put(cms_url+'/api/v1/callLegProfiles/'+callLegProfID, data=xml, headers=headers, auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    print r
    return callLegProfID

# List all call leg profile Ids
def getCallLegProfiles():
    r = requests.get(cms_url+'/api/v1/callLegProfiles/', auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    print r
    resp = r.text
    callLegList = []
    doc = xmltodict.parse(r.content)
    for i in range(doc["callLegProfiles"]["callLegProfile"].__len__()):
        callLegId = doc["callLegProfiles"]["callLegProfile"][i].get("@id")
        callLegList.append(callLegId)

    print callLegList
    return  callLegList


# Create CoSpace
@app.route('/createcospace', methods=['POST'])
def createCoSpace():
    callLegLecturerProfID = addCallLegLecturerProfile()
    callLegStudentProfID = addCallLegStudentProfile()
    print(callLegStudentProfID)
    cospaceName = request.form['cospacename']
    uri = request.form['studuri']
    callid = request.form['studcallId']
    studentCallLeg = request.form['selectStudProfile']
    xml = {
    "name": cospaceName,
    "autoGenerated": "false",
    "uri": uri,
    "callId": callid,
    "callLegProfile": studentCallLeg,
  }
    try:
        headers = {'Content-Type': 'x-www-form-urlencoded'}
        r = requests.post(cms_url+'/api/v1/coSpaces/', data=xml, headers=headers, auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
        status_code = r.status_code
        resp = r.text
        if status_code == 200 or status_code == 201:
            locationCoSpace = r.headers.get("Location")
            coSpaceId = locationCoSpace.split("/")[4]
        else:
            r.raise_for_status()
            flash('Oops!! Unexpected error ' + resp, 'danger')
            print ("Error occurred in POST --> " + resp)
    except requests.exceptions.HTTPError as err:
        print ("Error in connection --> " + str(err))

    try:
        # POST Method to see numaccessmethod to 1
        rAccess = requests.post(cms_url+'/api/v1/coSpaces/'+coSpaceId+"/accessMethods", auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
        status_code_raccess = r.status_code
        resp_raccess = r.text
        if status_code == 200 or status_code == 201:
            accMethodId = rAccess.headers.get("Location").split("/")[6]
            addDialInfoLecturer(coSpaceId, accMethodId)
            dictURLandURL = getURLandURI(coSpaceId, accMethodId)
            message = json.dumps(dictURLandURL)
            flash('Success '+message, 'success')
            return redirect(url_for('index'))

        else:
            r.raise_for_status()
            flash('Oops!! Unexpected error ' + resp, 'danger')
            print ("Error occurred in POST --> " + resp)
    except requests.exceptions.HTTPError as err:
        print ("Error in connection --> " + str(err))


# Add dial information for lecturer
def addDialInfoLecturer(coSpaceId, accessMethodId):
    lecuri = request.form['lecuri']
    leccallid = request.form['leccallId']
    xml = {
    "uri": lecuri,
    "callId": leccallid
  }
    headers = {'Content-Type': 'x-www-form-urlencoded'}
    r = requests.put(cms_url+'/api/v1/coSpaces/'+coSpaceId+"/accessMethods/"+accessMethodId, data=xml, headers=headers, auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    print r.url

# Fetch URL and URI
def getURLandURI(coSpaceId, accessMethodId):
    # Fetch Student info
    studReq = requests.get(cms_url+'/api/v1/coSpaces/'+coSpaceId, auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    student = xmltodict.parse(studReq.content)
    stuCallId = student["coSpace"]["callId"]
    stuSecret = student["coSpace"]["secret"]
    stuURI =  student["coSpace"]["uri"]
    studentURL = "https://university/invited.sf?secret="+stuSecret+"&id="+stuCallId
    studentURI = stuURI+"@university.edu"
    # Fetch Lecturer info
    lectReq = requests.get(cms_url+'/api/v1/coSpaces/'+coSpaceId+"/accessMethods/"+accessMethodId, auth=requests.auth.HTTPBasicAuth(username, password), verify=False)
    lecturer = xmltodict.parse(lectReq.content)
    lecCallId = lecturer["accessMethod"]["callId"]
    lecSecret = lecturer["accessMethod"]["secret"]
    lecURI =  lecturer["accessMethod"]["uri"]
    lecturerURL = "https://university/invited.sf?secret="+lecSecret+"&id="+lecCallId
    lecturerURI = lecURI+"@university.edu"
    values = {
        "Lecturer URL": lecturerURL,
        "Lecturer URI": lecturerURI,
        "Student URL": studentURL,
        "Student URI": studentURI
    }
    return values

app.run('0.0.0.0')
